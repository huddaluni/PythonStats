# -*- coding: utf-8 -*-
"""stats_with_python_kaggle_YTdata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dk2AyqZr2xaTYHIbQN0D6VCD8ya5o2su
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib

#mount Drive
from google.colab import drive
drive.mount("/content/drive")

# Specify the file path to your CSV file ,
# note this is path to my drive where I have this kaggle youtube statistics file you can change this to your directory.
file_path = '/content/drive/MyDrive/Colab Notebooks/YT.csv'

# Load the CSV file into a DataFrame with the 'latin-1' encoding
yt_data = pd.read_csv(file_path, encoding='latin-1')

# Display the first few rows of the DataFrame
yt_data

"""# Data structures:

## A- Quantitative Variables:

### 1. Discrete Variables:
**rank**: *The ranking of the YouTube channel (e.g., 1, 2, 3).*
**uploads**: *The number of video uploads on the channel.*

### 2. Continuous Variables:
**subscribers**: *The number of subscribers to the channel.*
**video views**: *The total number of video views for the channel.*
**subscribers_for_last_30_days**: *Subscribers gained in the last 30 days.*
**Gross tertiary education enrollment (%)**: *Tertiary education enrollment percentage.*
**Population**: *Total population.*
**Unemployment rate**: *The unemployment rate.*
**Urban_population**: *Urban population count.*
**Latitude**: *Latitude of the channel's location.*
**Longitude**: *Longitude of the channel's location.*

## B- Qualitative Variables:

### 1. Nominal Variables:
**Youtuber**: The name of the YouTube channel.
**category**: The category to which the channel belongs (e.g., Music, **Entertainment**, Education).
**Title**: The title of the channel.
**Country**: The country where the channel is based.
**Abbreviation**: The abbreviation of the country.
**channel_type**: The type of channel (e.g., Music, Games, Entertainment).

### 2. Ordinal Variables:
**created_year**: The year the channel was created.
**created_month**: The month the channel was created.
**created_date**: The date the channel was created.







"""

#Load first five rows and first seven columns

yt_data.iloc[:5,:7]

"""Here lets describe this data in terms of structures
rank(discrete) , Youtuber(Nominal), Subscribers(continuous), videoviews(continuous), category(Nominal), Title(Nominal), Uploads(Descrete)
"""

#load 7 more columns after 7th col
yt_data.iloc[:5,7:14]

"""Here country (Nominal), Abbreviation(Nominal- its just ISO2 code of country), Channel_type(Nominal), Countryrank(continuous), channel type rank(continuous), video views for last 30 days(continuous)

# Variable Types:

## Dependent Variable or Target Variable
This is the variables we are trying to find the outcome for

## Independent Variable or Feature Variable
This is the variable we are using as inputs for the outcome varibale and determining thier impacts on our target variable

## Categorical Variable
Variable holding Qualitative data

## Continuous Variable
variable holding Quantitative data
"""

import pandas as pd
df = pd.DataFrame({"Jhon": [89,87,76,88,96], "Adam": [88,52,69,79,82], "David": [90,92,71,60,64]})
df

df.mean(axis=0)

df1 = pd.DataFrame({"Jhon": [89,87,87,87,96], "Adam": [88,52,69,69,82], "David": [90,92,90,60,64]})
df1

df1.mode()

df1.var() #inbuilt method for sample variance

(((df1["Jhon"]-df1["Jhon"].mean())**2).sum())/(len(df1["Jhon"])-1) #manualformula for sample variance

"""# Using Functions and Loops
for calculating variance
"""

#in loop method
def calculate_sample_variance(df1, column_name):
    if column_name in df1.columns:
        # Extract the specified column from the DataFrame
        column = df1[column_name]

        # Calculate the sample variance using the formula
        variance = ((column - column.mean())**2).sum() / (len(column) - 1)

        return variance
    else:
        return None

# Assuming df1 is your DataFrame
for column_name in df1.columns:
    sample_variance = calculate_sample_variance(df1, column_name)
    if sample_variance is not None:
        print(f"Sample Variance for '{column_name}':", sample_variance)
    else:
        print(f"Column '{column_name}' not found in the DataFrame.")

df1.var(ddof=0) #ddof degrees of freedom is equal to zero for Population Variance

import numpy as np# square root of variance is population standard deviation
np.sqrt(199.36)

"""# Using Staistics Library :
for find Mean meadian mode Variance and Standard Deviation
"""

import statistics as st

num = [1,2,3,4,5,6,7,8,9]
st.mean(num)

num1 = [1,2,3,4,4,4,5,6,7,8,9]
st.mode(num1)

st.variance(num1)

np.sqrt(st.variance(num1))

"""# Computing Measures of Dispersion
## Skewness
## Kurtosis
## Percentiles
## Z-score

"""

#load csv youtube Kaggle data
yt_data

yt_data.describe()
#this will give me the important 5 numbers summary of all numerical vars

#builtin numpy formula for range, lets say i want to calculate range for number of subscribers
np.ptp(yt_data["subscribers"])

# IQR = Q3 - Q1
from scipy.stats import iqr
iqr(yt_data["subscribers"])

# kurtosis , pearson or fishers
from scipy.stats import kurtosis
print(f"Pearson Kurtosis: {kurtosis(yt_data['subscribers'],fisher= False)} ")
print(f"Fisher's Kurtosis: {kurtosis(yt_data['subscribers'], fisher= True)}")

from scipy.stats import skew
skew(yt_data['subscribers'])

# Percentile, dataframe(column, percentile)
# 75 percent of youtube videos have this number of subscribers

np.percentile(yt_data['subscribers'],75)

#zscores
from scipy.stats import zscore
zscore(yt_data['subscribers'])

#another formula for zscores or standard scores
from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
ss.fit_transform(yt_data['subscribers'].values.reshape(-1,1))
#this formula is bit complicated but gives same values of zscores

